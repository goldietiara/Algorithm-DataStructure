My goal is to had a solid understanding of the fundamental of algorithms ( •̀ᴗ•́ )و 
by taking a practical take on algorithms with JS ( •̀ᴗ•́ )و
not going to go in depth on the theoretical aspects of algorithms ( ≖ ͜ʖ≖)

Course Topics
✧ Algorithms
✧ Measuring Performance
✧ Time and Space Complexity
✧ Big O Notation 
✧ Math Algorithms
✧ Sort
✧ Search
✧ Misc. algorithms and problem solving



ʕっ•ᴥ•ʔっ ALGORITHMS ✧
is a set of well-defined instructor to solve a particular problem
algorithms had well defined inputs and outputs, each step should be clear and unambiguous
algorithms is language independent you can use algorithms in other language, its just a sequence of instructor

we had many ways to resolve one problem, each way comes with its own tradeoff when it comes to performance and efficiency



ʕっ•ᴥ•ʔっ TIME AND SPACE COMPLEXITY ✧

The absolute running time of an algorithms cannot be predicted, since of these factors:
✧ The programming language that being used
✧ The computer that running the program
✧ Other program running at the same time
✧ Quality of the Operating System (OS)

The performance of the algorithm is affected by the size of its input
✧ Time Complexity = Amount of TIME taken by an algorithm to run
✧ Space Complexity = Amount of MEMORY taken by an algorithm to run

To represent complexity we can use Asymptotic Notations
✧ Asymptotic Notations is Mathematical tools to represent time and space complexity
  There are mainly 3 Asymptotic Notation:
    1. Big-O Notation (O-notation) for Worst case complexity
    2. Omega Notation (Ω-notation) for Best case complexity
    3. Theta Notation (Θ-notation) for Average case complexity

To make it more practical and easy to understand we'll be using the worst case complexity, because we will be more concern about the worst case complexity



ʕっ•ᴥ•ʔっ BIG O NOTATION ✧
the worst case complexity is represented using the Big-O notation
Big-O describe the complexity of an algorithm using algebraic terms

Big-O characteristic:
✧ it is expressed in terms of the input
✧ it focuses on the bigger picture without getting caught up in the minute details


Time Complexity
✧ O(n) is linear time complexity, because it will execute depends on the input
    ex:
    function summation(n){
        let sum = 0
        for (let i = 1; i<=n; i++){
            sum +=i
        }
        return sum
    }

✧ O(1) is constant time complexity, because it execute only once
    ex:
    function summation(n){
        return (n * (n + 1)) / 2
    }

✧ O(nˆ2) is quadratic time complexity, for two nested loop
    ex:
    for(i = 1; i <= n; i++){
        for(j = 1; j <= i; j++){
            //code
        }
    }

    3nˆ2 + 5n + 1

✧ O(nˆ3) is cubic time complexity, for three nested loop

✧ O(log n) is logarithmic time complexity, for input size reduces by half every iteration


Space Complexity

✧ O(1) Constant space complexity, is when the algorithm doesn't need an extra memory or the memory doesn't depend on the input size
    ex: sorting, sorting the array without additional array

✧ O(n) linear space complexity, is where extra space needed grows as the input size grows

✧ O(log n) logarithmic space complexity, is when extra space needed grows but not at the same rate as the input size

BIG O NOTATION NOTES:
✧ different algorithms work well under different constraints and there is multiple algorithm for the same problem
✧ the same algorithm with the same programming language can be implemented in different ways
✧ when at work, don't lose sight of the big picture. rather than writing clever code, write code that is simple to read and maintain.



ʕっ•ᴥ•ʔっ BIG O NOTATION OBJECTS AND ARRAY ✧

OBJECTS, is a collection of key values pairs
time complexity of an object for:
✧ Insert = O(1) constant, take the same amount of time on every execution
✧ Remove = O(1) constant, take the same amount of time on every execution
✧ Access = O(1) constant, take the same amount of time on every execution
✧ Search = O(n) linear, had to look up to every properties until find what we were searching

object method:
✧ object.keys() = O(n) linear, return an array of the keys
✧ object.values() = O(n) linear, return an array of the object values
✧ object.entries() = O(n) linear, return an array of array object key and value

ex:
const user = {
  name: "owy",
  gender: "female",
  dateOfBirth: "27-01-2021",
  age: 3,
  hobby: "workout",
  job: "front-end developer",
};

Object.keys(user)
[ 'name', 'gender', 'dateOfBirth', 'age', 'hobby', 'job' ]

Object.values(user)
[ 'owy', 'female', '27-01-2021', 3, 'workout', 'front-end developer' ]

Object.entries(user)
[
  [ 'name', 'owy' ],
  [ 'gender', 'female' ],
  [ 'dateOfBirth', '27-01-2021' ],
  [ 'age', 3 ],
  [ 'hobby', 'workout' ],
  [ 'job', 'front-end developer' ]
]

ARRAY, is an ordered collection of values
time complexity for an array:
✧ Insert / Remove at end = O(1) constant
✧ Insert / Remove at beginning = O(n) linear, need to reset all the index
✧ Access = O(1) constant
✧ Search = O(n) linear, need to check every element to find the element that we were searching

Array method:
✧ Push / Pop = O(1)
✧ Shift / Unshift / Concat / Slice / Splice = O(n)
✧ forEach / map / filter / reduces = O(n)



